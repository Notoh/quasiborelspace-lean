import Mathlib

open Set Function Encodable Equiv MeasureTheory

instance : MeasurableSpace ℝ := Real.measurableSpace
instance : MeasurableSpace ℕ := Nat.instMeasurableSpace

universe u v
variable {X Y Z : Type*}

def disjoint_function {X : Type*} (P : ℝ → ℕ) (i: ℕ → (ℝ → X)) : ℝ → X :=
  (fun (r : ℝ) => (i ∘ P) r r)

class qbs (X : Type*) where 
  /-- predicate asking if a function ℝ → X is ``measurable'', use in_mx below instead-/
  in_mx' : (ℝ → X) → Prop
  /- Postcomposition of something in MX with a measurable function is in MX -/
  comp_meas : ∀ (f : ℝ → ℝ) (g : ℝ → X), in_mx' g → (Measurable f) → (in_mx' (g ∘ f))
  /- constant functions are in MX -/
  const : ∀ c : X, in_mx' (Function.const ℝ c)
  /- disjoint union, if α_i is a sequence of functions in MX, given any measurable partition function P of ℝ, the function that acts as α_i on each piece 
  delineated by P is in MX. -/
  disjoint_union : ∀ (i : ℕ → (ℝ → X)) (P : ℝ → ℕ), (∀ n : ℕ, in_mx' (i n)) → (Measurable P) → (in_mx' (disjoint_function P i))

def in_mx [qbs X] (f : ℝ → X) : Prop :=
  ‹qbs X›.in_mx' f

/- when you need to specify the qbs you are working over -/
notation "in_mx[" f "]" => @in_mx _ f

def discrete_qbs (X : Type*) : qbs X where
  in_mx' := (fun _ => True)
  comp_meas := by simp
  const := by simp
  disjoint_union := by simp

instance : qbs Empty := discrete_qbs Empty

/-  
def bool_set : Set ℝ := { x : ℝ | x = 0 ∨ x = 1 }
instance : Zero bool_set := ⟨⟨0, Or.inl rfl⟩⟩
instance : qbs bool_set := discrete_qbs bool_set
-/ 
noncomputable def ind (S : Set X) : X → ℝ := Set.indicator S (fun _ => 1) 

@[fun_prop]
def qbs_morphism [qbs X] [qbs Y] (g : X → Y) : Prop :=
  forall {f : ℝ → X}, in_mx f → in_mx (g ∘ f) 

lemma id_qbs_morphism {_ : qbs X} : qbs_morphism (@id X) := by simp [qbs_morphism]

@[fun_prop]
lemma id_qbs_morphism' {_ : qbs X} : qbs_morphism fun a : X => a := id_qbs_morphism

theorem qbs_morphism_comp {_ : qbs X} {_ : qbs Y} {_ : qbs Z} {g : Y → Z} {f : X → Y} (hg : qbs_morphism g) (hf : qbs_morphism f) : qbs_morphism (g ∘ f)
:= by exact fun {f_1} a => hg (hf a)

@[fun_prop]
theorem qbs_morphism_comp' {_ : qbs X} {_ : qbs Y} {_ : qbs Z} (g : Y → Z) (f : X → Y) (hg : qbs_morphism g) (hf : qbs_morphism f) :
    qbs_morphism (fun x => g (f x)) := qbs_morphism_comp hg hf

lemma const_qbs_morphism {_ : qbs X} {_ : qbs Y} (y : Y) : qbs_morphism (Function.const X y) := by {
    simp [qbs_morphism]
    intros
    apply qbs.const
}

lemma in_mx_const [qbs X] (c : X) : in_mx (Function.const ℝ c) := by apply qbs.const

lemma in_mx_comp_meas [qbs X] (f : ℝ → ℝ) (g : ℝ → X) : in_mx g → (Measurable f) → in_mx (g ∘ f) := by {
    intros
    apply qbs.comp_meas <;> assumption 
} 

lemma in_mx_disjoint_union [qbs X] (i : ℕ → (ℝ → X)) (P : ℝ → ℕ) : (∀ n : ℕ, in_mx (i n)) → (Measurable P) → (in_mx (disjoint_function P i)) := by {
    intros
    apply qbs.disjoint_union <;> assumption
}

/- generate a minimal qbs from a given set of functions -/
inductive generate_qbs (mX : Set (ℝ → X)) : (ℝ → X) → Prop
  | basic : ∀ f ∈ mX, generate_qbs mX f
  | comp : ∀ f : ℝ → ℝ, ∀ g : ℝ → X, (generate_qbs mX g) → (Measurable f) → generate_qbs mX (g ∘ f)
  | const : ∀ c : X, generate_qbs mX (Function.const ℝ c)
  | disjoint_union : ∀ (i : ℕ → (ℝ → X)) (P : ℝ → ℕ), (∀ n : ℕ, generate_qbs mX (i n)) →  (Measurable P) → generate_qbs mX (disjoint_function P i)

def generate_qbs_from (mX : Set (ℝ → X)) : qbs X where
  in_mx' := generate_qbs mX
  comp_meas := .comp
  const := .const
  disjoint_union := .disjoint_union

lemma in_mx_generate_from {mX : Set (ℝ → X)} {g : ℝ → X} (hg : g ∈ mX) : in_mx[generate_qbs_from mX] g := .basic g hg

lemma disjoint_function_preimage (P : ℝ → ℕ) (Fi : ℕ → (ℝ → X)) (A : Set X) : 
    (disjoint_function P Fi)⁻¹' A = (⋃ i : ℕ, ((Fi i)⁻¹' A) ∩ (P⁻¹' {i})) := by {
    ext; unfold disjoint_function Set.preimage;
    rename_i x; constructor
    intros hx; rw [Set.mem_iUnion]
    use (P x); simp[*]; exact hx
    intros hx;    
    rw [Set.mem_iUnion] at hx; 
    obtain ⟨i, hi⟩ := hx
    rcases hi with ⟨h1, h2⟩
    simp[*]; rw [h2]; exact h1
}

def measurable_to_qbs [MeasurableSpace X] : qbs X where
  in_mx' := Measurable
  comp_meas := by { intros f g hg hf; apply Measurable.comp hg hf }
  const := by { intros c; apply measurable_const }
  disjoint_union := by { 
  intros i P hi hP; unfold Measurable;
  intros t ht; rw [disjoint_function_preimage]
  measurability
}

instance : qbs ℝ := measurable_to_qbs

/-@[elab_as_elim]
theorem generate_qbs_from_induction (mX : Set (ℝ → X)) (p: ∀ f : ℝ → X, in_mx[generate_qbs_from mX] g → Prop)
(hbasic : ∀ f ∈ mX, ∀ hf, p f hf) ()-/

def qbs_measurable_set [qbs X] : Set X → Prop := 
  (fun s => qbs_morphism (ind s))

lemma ind_function_emptyset0 [qbs X] : ind (∅ : Set X)  = (fun _ => 0) := by { simp[ind] }

def zero_set : Set ℝ := {0}
def one_set : Set ℝ := {1}

noncomputable def ind_flip (x : ℝ) : ℝ := 
  haveI := Classical.decPred (· ∈ zero_set)
  haveI := Classical.decPred (· ∈ one_set)
  zero_set.piecewise (fun x => x + 1) (one_set.piecewise (fun x => x - 1) (id)) x  

lemma ind_flip_meas : Measurable ind_flip := by {
   unfold ind_flip
   apply Measurable.piecewise
   { unfold zero_set; measurability }
   { measurability }
   { apply Measurable.piecewise <;> try measurability
     unfold one_set; measurability }
}

lemma ind_compl_flip [qbs X] (S : Set X) : ind (Sᶜ) = (ind_flip ∘ (ind S))  := by {
  funext x
  unfold ind ind_flip indicator zero_set one_set piecewise
  simp; 
  split_ifs <;> try aesop
  /- all the cases are either trivial arithmetic or have contradictory hypotheses like 0 = 1-/
}

lemma qbs_measurable_set_compl [qbs X] (s : Set X) : qbs_measurable_set s → qbs_measurable_set sᶜ := by
{
  intros hs
  unfold qbs_measurable_set
  unfold qbs_morphism
  intros f hf
  rw [ind_compl_flip]
  unfold qbs_measurable_set at hs
  apply in_mx_comp_meas; apply ind_flip_meas
  apply hs; exact hf
}


def qbs_to_measurable [qbs X] : MeasurableSpace X where
  MeasurableSet' := qbs_measurable_set
  measurableSet_empty := by { simp [qbs_measurable_set]; simp[ind_function_emptyset0]; apply const_qbs_morphism } 
  measurableSet_compl := by { intros s hs; apply qbs_measurable_set_compl; exact hs }
  measurableSet_iUnion := by { }

open CategoryTheory

def qbs_category : Type (u + 1) := Bundled qbs 

namespace qbs_cat
/- a default coercion between a category of qbs's and a collection of objects and morphisms-/
instance : CoeSort qbs_category Type* := Bundled.coeSort

/- recover a qbs from an object in a category -/
instance (X : qbs_category) : qbs X := X.str

/- turn a qbs into an object in the category -/
def of (X : Type u) [qb : qbs X] : qbs_category := ⟨X, qb⟩ 

/- coercion version of the above -/
@[simp]
theorem coe_of (X : Type u) [qbs X] : (of X : Type u) = X := rfl 

/- the morphisms of our category -/
instance unbundledHom : UnbundledHom @qbs_morphism :=
  ⟨@id_qbs_morphism, @qbs_morphism_comp⟩

/- a proof this forms a large (concrete) category-/
deriving instance LargeCategory for qbs_category

instance : ConcreteCategory qbs_category := by
  unfold qbs_category
  infer_instance

instance : Inhabited qbs_category := ⟨qbs_cat.of Empty⟩

/- the forgetful functor to Set is injective -/
attribute [local instance] ConcreteCategory.instFunLike

end qbs_cat
